// Code generated by goctl. DO NOT EDIT!
// Source: usercenter.proto

package usercenter

import (
	"context"

	"it-ku/app/usercenter/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetUserInfoReq       = pb.GetUserInfoReq
	GetUserInfoResp      = pb.GetUserInfoResp
	LoginSuccessResp     = pb.LoginSuccessResp
	LoginWithEmailReq    = pb.LoginWithEmailReq
	RegisterWithEmailReq = pb.RegisterWithEmailReq
	User                 = pb.User

	Usercenter interface {
		RegisterWithEmail(ctx context.Context, in *RegisterWithEmailReq, opts ...grpc.CallOption) (*LoginSuccessResp, error)
		LoginWithEmail(ctx context.Context, in *LoginWithEmailReq, opts ...grpc.CallOption) (*LoginSuccessResp, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	}

	defaultUsercenter struct {
		cli zrpc.Client
	}
)

func NewUsercenter(cli zrpc.Client) Usercenter {
	return &defaultUsercenter{
		cli: cli,
	}
}

func (m *defaultUsercenter) RegisterWithEmail(ctx context.Context, in *RegisterWithEmailReq, opts ...grpc.CallOption) (*LoginSuccessResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.RegisterWithEmail(ctx, in, opts...)
}

func (m *defaultUsercenter) LoginWithEmail(ctx context.Context, in *LoginWithEmailReq, opts ...grpc.CallOption) (*LoginSuccessResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.LoginWithEmail(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}
